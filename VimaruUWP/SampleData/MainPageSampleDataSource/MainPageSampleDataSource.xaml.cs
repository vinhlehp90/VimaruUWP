//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Blend.SampleData.MainPageSampleDataSource
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class MainPageSampleDataSource { }
#else

    public class MainPageSampleDataSource : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public MainPageSampleDataSource()
        {
            try
            {
                Uri resourceUri = new Uri("ms-appx:/SampleData/MainPageSampleDataSource/MainPageSampleDataSource.xaml", UriKind.RelativeOrAbsolute);
                Windows.UI.Xaml.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private DSNamHoc _DSNamHoc = new DSNamHoc();

        public DSNamHoc DSNamHoc
        {
            get
            {
                return this._DSNamHoc;
            }
        }

        private string _HoTen = string.Empty;

        public string HoTen
        {
            get
            {
                return this._HoTen;
            }

            set
            {
                if (this._HoTen != value)
                {
                    this._HoTen = value;
                    this.OnPropertyChanged("HoTen");
                }
            }
        }

        private string _NgaySinh = string.Empty;

        public string NgaySinh
        {
            get
            {
                return this._NgaySinh;
            }

            set
            {
                if (this._NgaySinh != value)
                {
                    this._NgaySinh = value;
                    this.OnPropertyChanged("NgaySinh");
                }
            }
        }

        private string _Lop = string.Empty;

        public string Lop
        {
            get
            {
                return this._Lop;
            }

            set
            {
                if (this._Lop != value)
                {
                    this._Lop = value;
                    this.OnPropertyChanged("Lop");
                }
            }
        }
    }

    public class DSNamHoc : System.Collections.ObjectModel.ObservableCollection<DSNamHocItem>
    { 
    }

    public class DSNamHocItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private DSMonHoc _DSMonHoc = new DSMonHoc();

        public DSMonHoc DSMonHoc
        {
            get
            {
                return this._DSMonHoc;
            }
        }

        private double _TB = 0;

        public double TB
        {
            get
            {
                return this._TB;
            }

            set
            {
                if (this._TB != value)
                {
                    this._TB = value;
                    this.OnPropertyChanged("TB");
                }
            }
        }

        private string _Ten = string.Empty;

        public string Ten
        {
            get
            {
                return this._Ten;
            }

            set
            {
                if (this._Ten != value)
                {
                    this._Ten = value;
                    this.OnPropertyChanged("Ten");
                }
            }
        }
    }

    public class DSMonHoc : System.Collections.ObjectModel.ObservableCollection<DSMonHocItem>
    { 
    }

    public class DSMonHocItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _TenMon = string.Empty;

        public string TenMon
        {
            get
            {
                return this._TenMon;
            }

            set
            {
                if (this._TenMon != value)
                {
                    this._TenMon = value;
                    this.OnPropertyChanged("TenMon");
                }
            }
        }

        private double _TCHT = 0;

        public double TCHT
        {
            get
            {
                return this._TCHT;
            }

            set
            {
                if (this._TCHT != value)
                {
                    this._TCHT = value;
                    this.OnPropertyChanged("TCHT");
                }
            }
        }

        private double _X = 0;

        public double X
        {
            get
            {
                return this._X;
            }

            set
            {
                if (this._X != value)
                {
                    this._X = value;
                    this.OnPropertyChanged("X");
                }
            }
        }

        private double _Y = 0;

        public double Y
        {
            get
            {
                return this._Y;
            }

            set
            {
                if (this._Y != value)
                {
                    this._Y = value;
                    this.OnPropertyChanged("Y");
                }
            }
        }

        private double _Z10 = 0;

        public double Z10
        {
            get
            {
                return this._Z10;
            }

            set
            {
                if (this._Z10 != value)
                {
                    this._Z10 = value;
                    this.OnPropertyChanged("Z10");
                }
            }
        }

        private double _Z4 = 0;

        public double Z4
        {
            get
            {
                return this._Z4;
            }

            set
            {
                if (this._Z4 != value)
                {
                    this._Z4 = value;
                    this.OnPropertyChanged("Z4");
                }
            }
        }

        private double _DiemChu = 0;

        public double DiemChu
        {
            get
            {
                return this._DiemChu;
            }

            set
            {
                if (this._DiemChu != value)
                {
                    this._DiemChu = value;
                    this.OnPropertyChanged("DiemChu");
                }
            }
        }

        private double _MaMon = 0;

        public double MaMon
        {
            get
            {
                return this._MaMon;
            }

            set
            {
                if (this._MaMon != value)
                {
                    this._MaMon = value;
                    this.OnPropertyChanged("MaMon");
                }
            }
        }
    }
#endif
}
